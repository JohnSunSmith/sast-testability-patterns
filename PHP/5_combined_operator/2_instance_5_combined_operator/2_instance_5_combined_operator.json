{
    "description": "This instance targets the usage of two assign statements in one line and shows, that the outer assign is a sink.",
    "code": {
        "path": "./2_instance_5_combined_operator.php",
        "injection_skeleton_broken": true
    },
    "discovery": {
        "rule": "./2_instance_5_combined_operator.sc",
        "method": "joern",
        "rule_accuracy": "FP",
        "notes": "The discovery looks for an `ASSIGN` statement. The rule could be better, if we could check if the `ASSIGN` statement in the source code is in the same line as another `ASSIGN` statement."
    },
    "compile": {
        "binary": "./2_instance_5_combined_operator.bash",
        "instruction": null,
        "dependencies": ""
    },
    "expectation": {
        "type": "xss",
        "sink_file": "./2_instance_5_combined_operator.php",
        "sink_line": 3,
        "source_file": "./2_instance_5_combined_operator.php",
        "source_line": 2,
        "expectation": true
    },
    "properties": {
        "category": "S0",
        "feature_vs_internal_api": "FEATURE",
        "input_sanitizer": false,
        "source_and_sink": false,
        "negative_test_case": false
    },
    "remediation": {
        "notes": "../docs/remediation_notes.md",
        "transformation": null,
        "modeling_rule": null
    }
}