{
    "description": "The instance uses `spl_autoload_register` to load a class and than it creates an instance from that class.",
    "code": {
        "path": "./1_instance_78_autoloading_classes.php",
        "injection_skeleton_broken": false
    },
    "discovery": {
        "rule": "./1_instance_78_autoloading_classes.sc",
        "method": "joern",
        "rule_accuracy": "Perfect",
        "notes": "The rule searches for function calls to `spl_autoload_register` on opcode level."
    },
    "compile": {
        "binary": "./1_instance_78_autoloading_classes.bash",
        "instruction": null,
        "dependencies": null
    },
    "expectation": {
        "type": "xss",
        "sink_file": "./1_instance_78_autoloading_classes.php",
        "sink_line": 11,
        "source_file": "./1_instance_78_autoloading_classes.php",
        "source_line": 6,
        "expectation": true
    },
    "properties": {
        "category": "D2",
        "feature_vs_internal_api": "INTERNAL_API",
        "input_sanitizer": false,
        "source_and_sink": false,
        "negative_test_case": false
    },
    "remediation": {
        "notes": "The solution for this problem is to search for the name of the class in the whole project, then include the file. If there is more than one class with the same name, we have to do over-approximation by trying all the possible classes. In addition to that, we have to be careful to call the closure in spl_autoload_register every time we create an object because it could have a vulnerability.",
        "transformation": null,
        "modeling_rule": null
    }
}